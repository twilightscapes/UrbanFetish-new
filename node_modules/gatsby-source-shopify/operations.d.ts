import { NodeInput, SourceNodesArgs } from "gatsby";
export interface ShopifyBulkOperation {
    execute: () => Promise<BulkOperationRunQueryResponse>;
    name: string;
    process: (objects: BulkResults, nodeBuilder: NodeBuilder, gatsbyApi: SourceNodesArgs, pluginOptions: ShopifyPluginOptions) => Promise<NodeInput>[];
}
export declare function createOperations(options: ShopifyPluginOptions, { reporter }: SourceNodesArgs): {
    incrementalProducts(date: Date): ShopifyBulkOperation;
    incrementalOrders(date: Date): ShopifyBulkOperation;
    incrementalCollections(date: Date): ShopifyBulkOperation;
    createProductsOperation: ShopifyBulkOperation;
    createOrdersOperation: ShopifyBulkOperation;
    createCollectionsOperation: ShopifyBulkOperation;
    cancelOperationInProgress: () => Promise<void>;
    cancelOperation: (id: string) => Promise<BulkOperationCancelResponse>;
    finishLastOperation: () => Promise<void>;
    completedOperation: (operationId: string, interval?: number) => Promise<{
        node: BulkOperationNode;
    }>;
};
